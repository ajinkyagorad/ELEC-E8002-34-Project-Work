/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3066.0) */

#ifndef BLE_HUMAN_INTERFACE_DEVICE_H__
#define BLE_HUMAN_INTERFACE_DEVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Human Interface Device event type. */
typedef enum
{ 
    BLE_HUMAN_INTERFACE_DEVICE_PROTOCOL_MODE_EVT_NOTIFICATION_ENABLED,  /**< Protocol Mode value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_PROTOCOL_MODE_EVT_NOTIFICATION_DISABLED, /**< Protocol Mode value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_PROTOCOL_MODE_EVT_WRITE, /**< Protocol Mode write event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_EVT_NOTIFICATION_ENABLED,  /**< Report value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_EVT_NOTIFICATION_DISABLED, /**< Report value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_EVT_CCCD_WRITE, /**< Report CCCD write event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_EVT_WRITE, /**< Report write event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_MAP_EVT_NOTIFICATION_ENABLED,  /**< Report Map value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_REPORT_MAP_EVT_NOTIFICATION_DISABLED, /**< Report Map value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_INPUT_REPORT_EVT_NOTIFICATION_ENABLED,  /**< Boot Keyboard Input Report value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_INPUT_REPORT_EVT_NOTIFICATION_DISABLED, /**< Boot Keyboard Input Report value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_INPUT_REPORT_EVT_CCCD_WRITE, /**< Boot Keyboard Input Report CCCD write event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_INPUT_REPORT_EVT_WRITE, /**< Boot Keyboard Input Report write event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_OUTPUT_REPORT_EVT_NOTIFICATION_ENABLED,  /**< Boot Keyboard Output Report value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_OUTPUT_REPORT_EVT_NOTIFICATION_DISABLED, /**< Boot Keyboard Output Report value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_KEYBOARD_OUTPUT_REPORT_EVT_WRITE, /**< Boot Keyboard Output Report write event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_MOUSE_INPUT_REPORT_EVT_NOTIFICATION_ENABLED,  /**< Boot Mouse Input Report value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_MOUSE_INPUT_REPORT_EVT_NOTIFICATION_DISABLED, /**< Boot Mouse Input Report value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_MOUSE_INPUT_REPORT_EVT_CCCD_WRITE, /**< Boot Mouse Input Report CCCD write event. */
    BLE_HUMAN_INTERFACE_DEVICE_BOOT_MOUSE_INPUT_REPORT_EVT_WRITE, /**< Boot Mouse Input Report write event. */
    BLE_HUMAN_INTERFACE_DEVICE_HID_INFORMATION_EVT_NOTIFICATION_ENABLED,  /**< HID Information value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_HID_INFORMATION_EVT_NOTIFICATION_DISABLED, /**< HID Information value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_HID_CONTROL_POINT_EVT_NOTIFICATION_ENABLED,  /**< HID Control Point value notification enabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_HID_CONTROL_POINT_EVT_NOTIFICATION_DISABLED, /**< HID Control Point value notification disabled event. */
    BLE_HUMAN_INTERFACE_DEVICE_HID_CONTROL_POINT_EVT_WRITE, /**< HID Control Point write event. */
} ble_human_interface_device_evt_type_t;

// Forward declaration of the ble_human_interface_device_t type.
typedef struct ble_human_interface_device_s ble_human_interface_device_t;


typedef enum
{ 
    REPORT_TYPE_INPUT_REPORT = 1, 
    REPORT_TYPE_OUTPUT_REPORT = 2, 
    REPORT_TYPE_FEATURE_REPORT = 3, 
} enum_report_type_t;

typedef struct
{
    enum_report_type_t report_type; 
} human_interface_device_report_reference_report_type_t; 


/**@brief Report Reference structure. */
typedef struct
{
    uint8_t report_id;
    human_interface_device_report_reference_report_type_t report_type;
} ble_human_interface_device_report_reference_t;

/**@brief External Report Reference structure. */
typedef struct
{
    uint8_array_t external_report_reference;
} ble_human_interface_device_external_report_reference_t;



typedef enum
{ 
    PROTOCOL_MODE_VALUE_BOOT_PROTOCOL_MODE = 0, 
    PROTOCOL_MODE_VALUE_REPORT_PROTOCOL_MODE = 1, 
} enum_protocol_mode_value_t; 
typedef struct
{
    enum_protocol_mode_value_t protocol_mode_value; 
} protocol_mode_protocol_mode_value_t; 
typedef enum
{ 
    REMOTEWAKE_THE_DEVICE_IS_NOT_DESIGNED_TO_BE_CAPABLE_OF_PROVIDING_WAKE_UP_SIGNAL_TO_A_HID_HOST = 0, 
    REMOTEWAKE_THE_DEVICE_IS_DESIGNED_TO_BE_CAPABLE_OF_PROVIDING_WAKE_UP_SIGNAL_TO_A_HID_HOST = 1, 
} enum_flags_remotewake_t;

typedef enum
{ 
    NORMALLYCONNECTABLE_THE_DEVICE_IS_NOT_NORMALLY_CONNECTABLE = 0, 
    NORMALLYCONNECTABLE_THE_DEVICE_IS_NORMALLY_CONNECTABLE = 1, 
} enum_flags_normallyconnectable_t;

typedef struct
{
    enum_flags_remotewake_t remotewake; 
    enum_flags_normallyconnectable_t normallyconnectable; 
} hid_information_flags_t; 
typedef enum
{ 
    HID_CONTROL_POINT_COMMAND_SUSPEND = 0, 
    HID_CONTROL_POINT_COMMAND_EXIT_SUSPEND = 1, 
} enum_hid_control_point_command_t; 
typedef struct
{
    enum_hid_control_point_command_t hid_control_point_command; 
} hid_control_point_hid_control_point_command_t; 


/**@brief Protocol Mode structure. */
typedef struct
{
    protocol_mode_protocol_mode_value_t protocol_mode_value;
} ble_human_interface_device_protocol_mode_t;
/**@brief Report structure. */
typedef struct
{
    uint8_t report_value;
    ble_human_interface_device_report_reference_t report_reference; 
} ble_human_interface_device_report_t;
/**@brief Report Map structure. */
typedef struct
{
    uint8_t report_map_value;
    ble_human_interface_device_external_report_reference_t external_report_reference; 
} ble_human_interface_device_report_map_t;
/**@brief Boot Keyboard Input Report structure. */
typedef struct
{
    uint8_t boot_keyboard_input_report_value;
} ble_human_interface_device_boot_keyboard_input_report_t;
/**@brief Boot Keyboard Output Report structure. */
typedef struct
{
    uint8_t boot_keyboard_output_report_value;
} ble_human_interface_device_boot_keyboard_output_report_t;
/**@brief Boot Mouse Input Report structure. */
typedef struct
{
    uint8_t boot_mouse_input_report_value;
} ble_human_interface_device_boot_mouse_input_report_t;
/**@brief HID Information structure. */
typedef struct
{
    uint16_t bcdhid;
    uint8_t bcountrycode;
    hid_information_flags_t flags;
} ble_human_interface_device_hid_information_t;
/**@brief HID Control Point structure. */
typedef struct
{
    hid_control_point_hid_control_point_command_t hid_control_point_command;
} ble_human_interface_device_hid_control_point_t;

/**@brief Human Interface Device Service event. */
typedef struct
{
    ble_human_interface_device_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_human_interface_device_protocol_mode_t protocol_mode; /**< Holds decoded data in Write event handler. */
        ble_human_interface_device_report_t report; /**< Holds decoded data in Write event handler. */
        ble_human_interface_device_boot_keyboard_input_report_t boot_keyboard_input_report; /**< Holds decoded data in Write event handler. */
        ble_human_interface_device_boot_keyboard_output_report_t boot_keyboard_output_report; /**< Holds decoded data in Write event handler. */
        ble_human_interface_device_boot_mouse_input_report_t boot_mouse_input_report; /**< Holds decoded data in Write event handler. */
        ble_human_interface_device_hid_control_point_t hid_control_point; /**< Holds decoded data in Write event handler. */
    } params;
} ble_human_interface_device_evt_t;

/**@brief Human Interface Device Service event handler type. */
typedef void (*ble_human_interface_device_evt_handler_t) (ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_evt_t * p_evt);

/**@brief Human Interface Device Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_human_interface_device_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Human Interface Device Service. */
    ble_human_interface_device_protocol_mode_t ble_human_interface_device_protocol_mode_initial_value; /**< If not NULL, initial value of the Protocol Mode characteristic. */ 
    bool is_report_write_supported;    /**< TRUE if write to Report is supported. */ 
    ble_human_interface_device_report_t ble_human_interface_device_report_initial_value; /**< If not NULL, initial value of the Report characteristic. */ 
    ble_human_interface_device_report_map_t ble_human_interface_device_report_map_initial_value; /**< If not NULL, initial value of the Report Map characteristic. */ 
    bool is_boot_keyboard_input_report_write_supported;    /**< TRUE if write to Boot Keyboard Input Report is supported. */ 
    ble_human_interface_device_boot_keyboard_input_report_t ble_human_interface_device_boot_keyboard_input_report_initial_value; /**< If not NULL, initial value of the Boot Keyboard Input Report characteristic. */ 
    ble_human_interface_device_boot_keyboard_output_report_t ble_human_interface_device_boot_keyboard_output_report_initial_value; /**< If not NULL, initial value of the Boot Keyboard Output Report characteristic. */ 
    bool is_boot_mouse_input_report_write_supported;    /**< TRUE if write to Boot Mouse Input Report is supported. */ 
    ble_human_interface_device_boot_mouse_input_report_t ble_human_interface_device_boot_mouse_input_report_initial_value; /**< If not NULL, initial value of the Boot Mouse Input Report characteristic. */ 
    ble_human_interface_device_hid_information_t ble_human_interface_device_hid_information_initial_value; /**< If not NULL, initial value of the HID Information characteristic. */ 
    ble_human_interface_device_hid_control_point_t ble_human_interface_device_hid_control_point_initial_value; /**< If not NULL, initial value of the HID Control Point characteristic. */ 
} ble_human_interface_device_init_t;

/**@brief Human Interface Device Service structure. This contains various status information for the service.*/
struct ble_human_interface_device_s
{
    ble_human_interface_device_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Human Interface Device Service. */
    uint16_t service_handle; /**< Handle of Human Interface Device Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t protocol_mode_handles; /**< Handles related to the Protocol Mode characteristic. */
    bool is_report_write_supported;    /**< TRUE if write to Report is supported. */ 
    ble_gatts_char_handles_t report_handles; /**< Handles related to the Report characteristic. */
    ble_gatts_char_handles_t report_reference_handles; /**< Handles related to the Report Reference descriptor. */
    ble_gatts_char_handles_t report_map_handles; /**< Handles related to the Report Map characteristic. */
    ble_gatts_char_handles_t external_report_reference_handles; /**< Handles related to the External Report Reference descriptor. */
    bool is_boot_keyboard_input_report_write_supported;    /**< TRUE if write to Boot Keyboard Input Report is supported. */ 
    ble_gatts_char_handles_t boot_keyboard_input_report_handles; /**< Handles related to the Boot Keyboard Input Report characteristic. */
    ble_gatts_char_handles_t boot_keyboard_output_report_handles; /**< Handles related to the Boot Keyboard Output Report characteristic. */
    bool is_boot_mouse_input_report_write_supported;    /**< TRUE if write to Boot Mouse Input Report is supported. */ 
    ble_gatts_char_handles_t boot_mouse_input_report_handles; /**< Handles related to the Boot Mouse Input Report characteristic. */
    ble_gatts_char_handles_t hid_information_handles; /**< Handles related to the HID Information characteristic. */
    ble_gatts_char_handles_t hid_control_point_handles; /**< Handles related to the HID Control Point characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Human Interface Device.
 *
 * @param[out]  p_human_interface_device       Human Interface Device Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_human_interface_device_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_human_interface_device_init(ble_human_interface_device_t * p_human_interface_device, const ble_human_interface_device_init_t * p_human_interface_device_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_human_interface_device_on_ble_evt(ble_human_interface_device_t * p_human_interface_device, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Protocol Mode.
 *
 * @details Sets a new value of the Protocol Mode characteristic. The new value will be sent
 *          to the client the next time the client reads the Protocol Mode characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_protocol_mode  New Protocol Mode.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_protocol_mode_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_protocol_mode_t * p_protocol_mode);

/**@brief Function for setting the Report.
 *
 * @details Sets a new value of the Report characteristic. The new value will be sent
 *          to the client the next time the client reads the Report characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_report  New Report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_report_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_report_t * p_report);

/**@brief Function for sending the Report.
 *
 * @details The application calls this function after having performed a report.
 *          The report data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                    Human Interface Device Service structure.
 * @param[in]   p_report               New report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_report_send(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_report_t * p_report);

/**@brief Function for setting the Report Reference.
 *
 * @details Sets a new value of the Report Reference descriptor. The new value will be sent
 *          to the client the next time the client reads the Report Reference descriptor.
 *          This function is only generated if the descriptor's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_report_reference  New Report Reference.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_report_reference_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_report_reference_t * p_report_reference);

/**@brief Function for setting the Report Map.
 *
 * @details Sets a new value of the Report Map characteristic. The new value will be sent
 *          to the client the next time the client reads the Report Map characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_report_map  New Report Map.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_report_map_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_report_map_t * p_report_map);

/**@brief Function for setting the External Report Reference.
 *
 * @details Sets a new value of the External Report Reference descriptor. The new value will be sent
 *          to the client the next time the client reads the External Report Reference descriptor.
 *          This function is only generated if the descriptor's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_external_report_reference  New External Report Reference.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_external_report_reference_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_external_report_reference_t * p_external_report_reference);

/**@brief Function for setting the Boot Keyboard Input Report.
 *
 * @details Sets a new value of the Boot Keyboard Input Report characteristic. The new value will be sent
 *          to the client the next time the client reads the Boot Keyboard Input Report characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_boot_keyboard_input_report  New Boot Keyboard Input Report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_boot_keyboard_input_report_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_boot_keyboard_input_report_t * p_boot_keyboard_input_report);

/**@brief Function for sending the Boot Keyboard Input Report.
 *
 * @details The application calls this function after having performed a boot keyboard input report.
 *          The boot keyboard input report data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                    Human Interface Device Service structure.
 * @param[in]   p_boot_keyboard_input_report               New boot keyboard input report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_boot_keyboard_input_report_send(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_boot_keyboard_input_report_t * p_boot_keyboard_input_report);

/**@brief Function for setting the Boot Keyboard Output Report.
 *
 * @details Sets a new value of the Boot Keyboard Output Report characteristic. The new value will be sent
 *          to the client the next time the client reads the Boot Keyboard Output Report characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_boot_keyboard_output_report  New Boot Keyboard Output Report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_boot_keyboard_output_report_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_boot_keyboard_output_report_t * p_boot_keyboard_output_report);

/**@brief Function for setting the Boot Mouse Input Report.
 *
 * @details Sets a new value of the Boot Mouse Input Report characteristic. The new value will be sent
 *          to the client the next time the client reads the Boot Mouse Input Report characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_boot_mouse_input_report  New Boot Mouse Input Report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_boot_mouse_input_report_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_boot_mouse_input_report_t * p_boot_mouse_input_report);

/**@brief Function for sending the Boot Mouse Input Report.
 *
 * @details The application calls this function after having performed a boot mouse input report.
 *          The boot mouse input report data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                    Human Interface Device Service structure.
 * @param[in]   p_boot_mouse_input_report               New boot mouse input report.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_boot_mouse_input_report_send(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_boot_mouse_input_report_t * p_boot_mouse_input_report);

/**@brief Function for setting the HID Information.
 *
 * @details Sets a new value of the HID Information characteristic. The new value will be sent
 *          to the client the next time the client reads the HID Information characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_human_interface_device                 Human Interface Device Service structure.
 * @param[in]   p_hid_information  New HID Information.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_human_interface_device_hid_information_set(ble_human_interface_device_t * p_human_interface_device, ble_human_interface_device_hid_information_t * p_hid_information);

#endif //_BLE_HUMAN_INTERFACE_DEVICE_H__
