/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3066.0) */

#ifndef BLE_SCPS_H__
#define BLE_SCPS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Scan Parameters event type. */
typedef enum
{ 
    BLE_SCPS_SCAN_INTERVAL_WINDOW_EVT_NOTIFICATION_ENABLED,  /**< Scan Interval Window value notification enabled event. */
    BLE_SCPS_SCAN_INTERVAL_WINDOW_EVT_NOTIFICATION_DISABLED, /**< Scan Interval Window value notification disabled event. */
    BLE_SCPS_SCAN_INTERVAL_WINDOW_EVT_WRITE, /**< Scan Interval Window write event. */
    BLE_SCPS_SCAN_REFRESH_EVT_NOTIFICATION_ENABLED,  /**< Scan Refresh value notification enabled event. */
    BLE_SCPS_SCAN_REFRESH_EVT_NOTIFICATION_DISABLED, /**< Scan Refresh value notification disabled event. */
    BLE_SCPS_SCAN_REFRESH_EVT_CCCD_WRITE, /**< Scan Refresh CCCD write event. */
} ble_scps_evt_type_t;

// Forward declaration of the ble_scps_t type.
typedef struct ble_scps_s ble_scps_t;






typedef enum
{ 
    SCAN_REFRESH_VALUE_SERVER_REQUIRES_REFRESH = 0, 
} enum_scan_refresh_value_t; 
typedef struct
{
    enum_scan_refresh_value_t scan_refresh_value; 
} scan_refresh_scan_refresh_value_t; 


/**@brief Scan Interval Window structure. */
typedef struct
{
    uint16_t le_scan_interval;
    uint16_t le_scan_window;
} ble_scps_scan_interval_window_t;
/**@brief Scan Refresh structure. */
typedef struct
{
    scan_refresh_scan_refresh_value_t scan_refresh_value;
} ble_scps_scan_refresh_t;

/**@brief Scan Parameters Service event. */
typedef struct
{
    ble_scps_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_scps_scan_interval_window_t scan_interval_window; /**< Holds decoded data in Write event handler. */
    } params;
} ble_scps_evt_t;

/**@brief Scan Parameters Service event handler type. */
typedef void (*ble_scps_evt_handler_t) (ble_scps_t * p_scps, ble_scps_evt_t * p_evt);

/**@brief Scan Parameters Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_scps_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Scan Parameters Service. */
    ble_scps_scan_interval_window_t ble_scps_scan_interval_window_initial_value; /**< If not NULL, initial value of the Scan Interval Window characteristic. */ 
    ble_scps_scan_refresh_t ble_scps_scan_refresh_initial_value; /**< If not NULL, initial value of the Scan Refresh characteristic. */ 
} ble_scps_init_t;

/**@brief Scan Parameters Service structure. This contains various status information for the service.*/
struct ble_scps_s
{
    ble_scps_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Scan Parameters Service. */
    uint16_t service_handle; /**< Handle of Scan Parameters Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t scan_interval_window_handles; /**< Handles related to the Scan Interval Window characteristic. */
    ble_gatts_char_handles_t scan_refresh_handles; /**< Handles related to the Scan Refresh characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Scan Parameters.
 *
 * @param[out]  p_scps       Scan Parameters Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_scps_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_scps_init(ble_scps_t * p_scps, const ble_scps_init_t * p_scps_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_scps_on_ble_evt(ble_scps_t * p_scps, ble_evt_t * p_ble_evt);

/**@brief Function for sending the Scan Refresh.
 *
 * @details The application calls this function after having performed a scan refresh.
 *          The scan refresh data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_scps                    Scan Parameters Service structure.
 * @param[in]   p_scan_refresh               New scan refresh.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_scps_scan_refresh_send(ble_scps_t * p_scps, ble_scps_scan_refresh_t * p_scan_refresh);

#endif //_BLE_SCPS_H__
